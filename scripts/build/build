#!/usr/bin/env bash
set -e

# also note that i assme the branch has no '\' or '&'
function create_versions_file {
	cd $BASEDIR
	SVN_REV=`svn info | grep Revision | awk '{print $2}'`
	SVN_URL=`svn info | grep URL | awk '{print $2}'`
	SVN_BRANCH=${SVN_URL##*/}
	cd -

	echo "Built using SVN Branch: $SVN_BRANCH, r$SVN_REV"

	# this will be copied already with static resources
	# cp $SRCDIR/version.json $DISTDIR/version.json

	# patch versions.json
	if [[ `uname` == 'Darwin' ]]; then
		sed -i "" -e "s/UNBUILT_BRANCH/${SVN_BRANCH//\//\\/}/"  "$DISTDIR/version.json"
		sed -i "" -e "s/UNBUILT_REVISION/${SVN_REV//\//\\/}/"  "$DISTDIR/version.json"
		sed -i "" -e "s/UNBUILT_TIER/${TIER}/"  "$DISTDIR/version.json"
	else
		sed -i "s/UNBUILT_BRANCH/${SVN_BRANCH//\//\\/}/"  "$DISTDIR/version.json"
		sed -i "s/UNBUILT_REVISION/${SVN_REV//\//\\/}/"  "$DISTDIR/version.json"
		sed -i "s/UNBUILT_TIER/${TIER}/"  "$DISTDIR/version.json"
	fi
}

# Build target
if [ "$1" = "" ]; then
    APP=app
else
	APP=$1
fi
# Tier
if [ "$2" = "development" ]; then
    TIER=development
else
	TIER=production
fi
# cd to Trunk
cd ../..
# Base directory for this entire project
BASEDIR=$(cd $(dirname $0) && pwd)
# Source directory for unbuilt code
SRCDIR=$BASEDIR/src
# Directory containing dojo build utilities
TOOLSDIR=$SRCDIR/util/buildscripts
# Destination directory for built code
if [ ! -d $BASEDIR/dist ]; then
	mkdir $BASEDIR/dist
fi
DISTDIR=$BASEDIR/dist/$APP-$TIER
# Module ID of the main application package loader configuration
LOADERMID=$APP/run
# Main application package loader configuration
LOADERCONF=$SRCDIR/$LOADERMID.js
# Main application package build configuration
PROFILEDIR=$BASEDIR/profiles
# Base profile
BASEPROFILE=$PROFILEDIR/base.profile.js
# Local scripts and build tools
SCRIPTSDIR=$BASEDIR/scripts
# Dojo build profile
PROFILE=$PROFILEDIR/$APP-$TIER.profile.js


if !(which node >/dev/null && which java >/dev/null); then
	echo Need node.js and java to build!
	exit 1
fi

if [ ! -d $TOOLSDIR ]; then
	echo "Can't find Dojo build tools -- did you make install?"
	exit 1
fi

echo App: $APP
echo Tier: $TIER
echo Destination: $DISTDIR
echo Profile: $PROFILE

cd $SCRIPTSDIR

# Install dependencies
./install

# generate profile build layers
echo Generating profiles
if [ -f $PROFILE ]; then
    rm $PROFILE
fi
cp $BASEPROFILE $PROFILE
node build/module_layers.js $APP >> $PROFILE

# don't strip console logs from development builds
if [ $TIER = development ]; then
	echo "profile.stripConsole = 'none';" >> $PROFILE
fi

# compile less
echo Compiling less
./compile_less

# delete previous distribution
echo Deleting old files
rm -rf $DISTDIR

# copy root level static resources
echo Copying static resources
mkdir $DISTDIR
# TODO copy more static resources!!!
cp -v $SRCDIR/.htaccess $DISTDIR
cp -v $SRCDIR/favicon.ico $DISTDIR
cp -v $SRCDIR/*.php $DISTDIR
cp -v $SRCDIR/*.js* $DISTDIR
cp -v $SRCDIR/*.js $DISTDIR
cp -v $SRCDIR/*.sh $DISTDIR

rsync -av --exclude .svn $SRCDIR/cron/ $DISTDIR/cron/
rsync -av --exclude .svn $SRCDIR/elasticSearch/ $DISTDIR/elasticSearch/
rsync -av --exclude .svn $SRCDIR/oAuth/ $DISTDIR/oAuth/
rsync -av --exclude .svn $SRCDIR/rest/ $DISTDIR/rest/
rsync -av --exclude .svn $SRCDIR/vendor/ $DISTDIR/vendor/
mkdir $DISTDIR/lockFiles

create_versions_file
# Copy & minify production.html
# sed s/{{APP}}/$APP/g $SRCDIR/$TIER.html | tr -d '\n' > $DISTDIR/index.html

# copy additional static resources (cufon, es5 shim, respond polyfil)
# rsync -av --exclude .svn $SRCDIR/static/ $DISTDIR/static/

# backend services
# rsync -av --exclude .svn --exclude feed/static/* --exclude composer.* $SRCDIR/srv/ $DISTDIR/srv/

# run the dojo build
echo Building $APP
cd $TOOLSDIR
node ../../dojo/dojo.js load=build --require $LOADERCONF --profile $PROFILE --releaseDir $DISTDIR
echo Build complete
